// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/22/2024 00:27:09"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          maq_enc_veda
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module maq_enc_veda_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CH;
reg PG;
reg RO;
reg clk;
reg reset;
// wires                                               
wire EV;
wire GC;
wire VE;
wire [2:0] tipo;

// assign statements (if any)                          
maq_enc_veda i1 (
// port map - connection between master ports and signals/registers   
	.CH(CH),
	.EV(EV),
	.GC(GC),
	.PG(PG),
	.RO(RO),
	.VE(VE),
	.clk(clk),
	.reset(reset),
	.tipo(tipo)
);
initial 
begin 
#1000000 $finish;
end 

// PG
initial
begin
	PG = 1'b0;
	PG = #50000 1'b1;
	PG = #900000 1'b0;
end 

// CH
initial
begin
	CH = 1'b0;
	CH = #70000 1'b1;
	CH = #180000 1'b0;
end 

// RO
initial
begin
	RO = 1'b0;
	RO = #170000 1'b1;
	RO = #210000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

